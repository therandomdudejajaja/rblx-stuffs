local RunService = game:GetService("RunService")
local highlightedParts = {}
local oreColors = {
    steelore = Color3.new(0.7, 0.7, 0.7),
    coalore = Color3.new(0.2, 0.2, 0.2),
    goldore = Color3.new(1, 0.843, 0),
    rubyore = Color3.new(1, 0, 0),
    diamondore = Color3.new(0, 0, 1),
    amethystore = Color3.new(0.5, 0, 0.5)
}

local currentIndex = 1
local batchSize = 100 -- Number of parts to process per frame

RunService.Heartbeat:Connect(function()
    local parts = workspace.Blocks:GetDescendants()
    
    for i = 1, batchSize do
        if currentIndex > #parts then
            currentIndex = 1
            break
        end
        
        local part = parts[currentIndex]
        currentIndex = currentIndex + 1

        if part:IsA("BasePart") or part:IsA("MeshPart") then
            local partNameLower = part.Name:lower()

            if highlightedParts[part] == nil then
                for oreName, color in pairs(oreColors) do
                    if partNameLower:find(oreName) then
                        local highlight = part:FindFirstChild("Highlight")

                        if not highlight then
                            highlight = Instance.new("Highlight")
                            highlight.FillColor = color
                            highlight.Parent = part
                        end

                        highlightedParts[part] = true
                        break
                    end
                end
            elseif not part:FindFirstChild("Highlight") then
                highlightedParts[part] = nil
            end
        else
            highlightedParts[part] = nil
        end
    end

    -- Clean up the highlightedParts table from parts that no longer exist
    for part in pairs(highlightedParts) do
        if not part:IsDescendantOf(workspace.Blocks) then
            highlightedParts[part] = nil
        end
    end
end)
